close all; clear all; clc;
load('DipoleField');
%load('elec.mat'); % Make sure this contains electrode positions

%% ====================== 1. Load and Preprocess EEG Data ======================
% Load EEG data
[fname, fdir] = uigetfile('*.edf', 'Select the EEG file');
[hdr, record] = edfread([fdir fname]);

% Convert to proper FieldTrip structure
data = [];
data.trial = {record};
data.time = {(0:size(record,2)-1)/hdr.samples(1)};
data.label = hdr.label;
data.fsample = hdr.samples(1);

% Simple preprocessing (bandpass filter 1-30 Hz)
cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [1 30];
data = ft_preprocessing(cfg, data);

%% ====================== 2. Match EEG Channels to Electrode Positions ======================
good_ch = [];
good_elec = [];
position = [];
k = 1;
for i = 1:length(data.label)
    for j = 1:length(elec.label)
        if strcmp(data.label{i}, elec.label{j})
            good_ch(k) = i;
            good_elec(k) = j;
            position(k,:) = elec.elecpos(j,:);
            k = k + 1;
        end
    end
end

% Select only matched channels
cfg = [];
cfg.channel = data.label(good_ch);
data = ft_selectdata(cfg, data);

%% ====================== 3. Prepare Head Model ======================
cfg = [];
cfg.method = 'singleshell';
cfg.headshape = position;
headmodel = ft_prepare_headmodel(cfg);

%% ====================== 4. Set Up Source Model ======================
sourcemodel = [];
sourcemodel.pos = DipoleField.pos;
sourcemodel.inside = DipoleField.inside;
sourcemodel.leadfield = DipoleField.leadfield;

% Adjust leadfield dimensions to match our data
for i = 1:length(sourcemodel.leadfield)
    if ~isempty(sourcemodel.leadfield{i}) && sourcemodel.inside(i)
        sourcemodel.leadfield{i} = sourcemodel.leadfield{i}(good_elec, :);
    end
end

%% ====================== 5. Prepare Timelock Data PROPERLY ======================
cfg = [];
cfg.covariance = 'yes';
cfg.keeptrials = 'no'; % Average over trials
timelock = ft_timelockanalysis(cfg, data);

%% After ft_timelockanalysis
disp('Timelock structure fields:');
disp(fieldnames(timelock));
ft_datatype(timelock)  % This should return 'timelock'
% Ensure proper timelock structure
%if ~isfield(timelock, 'avg')
%    timelock.avg = struct();
%end
%if isfield(timelock, 'cov') && ~isfield(timelock.avg, 'cov')
%    timelock.avg.cov = timelock.cov;
%end
disp('Sourcemodel structure fields:');
disp(fieldnames(sourcemodel));
disp(['Number of inside dipoles: ' num2str(sum(sourcemodel.inside))]);
% Check leadfield dimensions match your selected channels
first_leadfield = sourcemodel.leadfield{find(sourcemodel.inside, 1)};
disp(['Leadfield size: ' num2str(size(first_leadfield))]);
disp(['Number of selected channels: ' num2str(length(good_elec))]);
%% ====================== 6. Robust Chunked sLORETA Processing ======================
cfg = [];
cfg.method = 'sloreta';
cfg.headmodel = headmodel;
cfg.lambda = '10%';
cfg.keepfilter = 'yes';
cfg.feedback = 'text';

% Initialize output structure
source = struct();
source.pos = sourcemodel.pos;
source.inside = sourcemodel.inside;
source.avg.pow = zeros(size(sourcemodel.pos,1), 1);
source.avg.filter = cell(size(sourcemodel.pos,1), 1);

% Get all inside dipole indices
inside_idx = find(sourcemodel.inside);
n_dipoles = length(inside_idx);
chunk_size = 500;  % Adjust based on your system memory
n_chunks = ceil(n_dipoles/chunk_size);

for chunk = 1:n_chunks
    fprintf('Processing chunk %d/%d (%.1f%%)...\n', ...
            chunk, n_chunks, 100*chunk/n_chunks);
    
    % Get current chunk indices
    chunk_start = (chunk-1)*chunk_size + 1;
    chunk_end = min(chunk*chunk_size, n_dipoles);
    current_idx = inside_idx(chunk_start:chunk_end);
    
    % Create temporary sourcemodel with only current dipoles
    temp_sourcemodel = struct();
    temp_sourcemodel.pos = sourcemodel.pos;
    temp_sourcemodel.inside = false(size(sourcemodel.inside));
    temp_sourcemodel.inside(current_idx) = true;
    temp_sourcemodel.leadfield = cell(size(sourcemodel.leadfield));
    temp_sourcemodel.leadfield(current_idx) = sourcemodel.leadfield(current_idx);
    
    % Process current chunk
    temp_source = ft_sourceanalysis(cfg, timelock, temp_sourcemodel);
    
    % Store results
    source.avg.pow(current_idx) = temp_source.avg.pow(temp_source.inside);
    source.avg.filter(current_idx) = temp_source.avg.filter(temp_source.inside);
    
    clear temp_source temp_sourcemodel  % Free memory
end

%% ====================== 7. Visualize Results ======================
% Create scalp surface interpolation
figure;
S = scatteredInterpolant(elec.elecpos(:,1), elec.elecpos(:,2), elec.elecpos(:,3), 'natural');
[minX, maxX] = bounds(elec.elecpos(:,1));
[minY, maxY] = bounds(elec.elecpos(:,2));
[xx, yy] = meshgrid(linspace(minX, maxX, 50), linspace(minY, maxY, 50));
zz = S(xx, yy);

% Plot every 5th dipole for better visibility
plot_indices = 1:5:size(sourcemodel.pos,1);

% Plot dipole activity
subplot(1,2,1);
surf(xx, yy, zz, 'FaceColor', [.8 .8 .8], 'EdgeColor', 'none', 'FaceAlpha', 0.3);
hold on;
scatter3(sourcemodel.pos(plot_indices,1), sourcemodel.pos(plot_indices,2), sourcemodel.pos(plot_indices,3), ...
    30, source.avg.pow(plot_indices), 'filled');
colorbar; title('Dipole Activity'); axis equal;

% Plot top 10 dipoles
[~, sorted_idx] = sort(source.avg.pow, 'descend');
top_dipoles = sorted_idx(1:min(10,length(sorted_idx)));

subplot(1,2,2);
scatter3(sourcemodel.pos(plot_indices,1), sourcemodel.pos(plot_indices,2), sourcemodel.pos(plot_indices,3), 10, 'k');
hold on;
scatter3(sourcemodel.pos(top_dipoles,1), sourcemodel.pos(top_dipoles,2), sourcemodel.pos(top_dipoles,3), ...
    120, source.avg.pow(top_dipoles), 'filled', 'MarkerEdgeColor', 'k');
title('Top 10 Strongest Dipoles'); axis equal; colorbar;

%% ====================== 8. EEG Reconstruction Comparison ======================
% Reconstruct EEG from first 5 channels and first second of data
n_channels = min(5, length(good_elec));
time_window = 1; % seconds
n_samples = min(round(time_window * data.fsample), size(data.trial{1},2));

% Build leadfield matrix for selected channels
A = zeros(n_channels, 3*sum(DipoleField.inside));
n = 1;
for i = find(DipoleField.inside)'
    A(:,n:n+2) = DipoleField.leadfield{i}(good_elec(1:n_channels), :);
    n = n + 3;
end

% Get filters and reconstruct
w = cat(1, source.avg.filter{source.inside});
est = A * w * data.trial{1}(1:n_channels, 1:n_samples);

% Plot comparison
figure;
subplot(2,1,1);
plot(data.time{1}(1:n_samples), data.trial{1}(1:n_channels, 1:n_samples));
title('Original EEG (First 5 Channels)');
ylabel('Amplitude (\muV)');

subplot(2,1,2);
plot(data.time{1}(1:n_samples), est);
title('Reconstructed EEG (First 5 Channels)');
xlabel('Time (s)');
ylabel('Amplitude (\muV)');